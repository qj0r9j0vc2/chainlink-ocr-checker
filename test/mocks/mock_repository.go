// Code generated by MockGen. DO NOT EDIT.
// Source: domain/interfaces/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "chainlink-ocr-checker/domain/entities"
	interfaces "chainlink-ocr-checker/domain/interfaces"
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockJobRepository is a mock of JobRepository interface.
type MockJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryMockRecorder
}

// MockJobRepositoryMockRecorder is the mock recorder for MockJobRepository.
type MockJobRepositoryMockRecorder struct {
	mock *MockJobRepository
}

// NewMockJobRepository creates a new mock instance.
func NewMockJobRepository(ctrl *gomock.Controller) *MockJobRepository {
	mock := &MockJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepository) EXPECT() *MockJobRepositoryMockRecorder {
	return m.recorder
}

// FindActiveJobs mocks base method.
func (m *MockJobRepository) FindActiveJobs(ctx context.Context) ([]entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveJobs", ctx)
	ret0, _ := ret[0].([]entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveJobs indicates an expected call of FindActiveJobs.
func (mr *MockJobRepositoryMockRecorder) FindActiveJobs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveJobs", reflect.TypeOf((*MockJobRepository)(nil).FindActiveJobs), ctx)
}

// FindByContract mocks base method.
func (m *MockJobRepository) FindByContract(ctx context.Context, contractAddress common.Address) ([]entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByContract", ctx, contractAddress)
	ret0, _ := ret[0].([]entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByContract indicates an expected call of FindByContract.
func (mr *MockJobRepositoryMockRecorder) FindByContract(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByContract", reflect.TypeOf((*MockJobRepository)(nil).FindByContract), ctx, contractAddress)
}

// FindByFilter mocks base method.
func (m *MockJobRepository) FindByFilter(ctx context.Context, filter entities.JobFilter) (*entities.JobSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", ctx, filter)
	ret0, _ := ret[0].(*entities.JobSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *MockJobRepositoryMockRecorder) FindByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockJobRepository)(nil).FindByFilter), ctx, filter)
}

// FindByID mocks base method.
func (m *MockJobRepository) FindByID(ctx context.Context, id int32) (*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockJobRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockJobRepository)(nil).FindByID), ctx, id)
}

// FindByTransmitter mocks base method.
func (m *MockJobRepository) FindByTransmitter(ctx context.Context, transmitterAddress common.Address) ([]entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTransmitter", ctx, transmitterAddress)
	ret0, _ := ret[0].([]entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTransmitter indicates an expected call of FindByTransmitter.
func (mr *MockJobRepositoryMockRecorder) FindByTransmitter(ctx, transmitterAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTransmitter", reflect.TypeOf((*MockJobRepository)(nil).FindByTransmitter), ctx, transmitterAddress)
}

// MockTransmissionRepository is a mock of TransmissionRepository interface.
type MockTransmissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransmissionRepositoryMockRecorder
}

// MockTransmissionRepositoryMockRecorder is the mock recorder for MockTransmissionRepository.
type MockTransmissionRepositoryMockRecorder struct {
	mock *MockTransmissionRepository
}

// NewMockTransmissionRepository creates a new mock instance.
func NewMockTransmissionRepository(ctrl *gomock.Controller) *MockTransmissionRepository {
	mock := &MockTransmissionRepository{ctrl: ctrl}
	mock.recorder = &MockTransmissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransmissionRepository) EXPECT() *MockTransmissionRepositoryMockRecorder {
	return m.recorder
}

// FindByContract mocks base method.
func (m *MockTransmissionRepository) FindByContract(ctx context.Context, contractAddress common.Address, limit int) ([]entities.Transmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByContract", ctx, contractAddress, limit)
	ret0, _ := ret[0].([]entities.Transmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByContract indicates an expected call of FindByContract.
func (mr *MockTransmissionRepositoryMockRecorder) FindByContract(ctx, contractAddress, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByContract", reflect.TypeOf((*MockTransmissionRepository)(nil).FindByContract), ctx, contractAddress, limit)
}

// FindByRoundRange mocks base method.
func (m *MockTransmissionRepository) FindByRoundRange(ctx context.Context, contractAddress common.Address, startRound, endRound uint32) ([]entities.Transmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoundRange", ctx, contractAddress, startRound, endRound)
	ret0, _ := ret[0].([]entities.Transmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoundRange indicates an expected call of FindByRoundRange.
func (mr *MockTransmissionRepositoryMockRecorder) FindByRoundRange(ctx, contractAddress, startRound, endRound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoundRange", reflect.TypeOf((*MockTransmissionRepository)(nil).FindByRoundRange), ctx, contractAddress, startRound, endRound)
}

// FindByTimeRange mocks base method.
func (m *MockTransmissionRepository) FindByTimeRange(ctx context.Context, contractAddress common.Address, startTime, endTime int64) ([]entities.Transmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTimeRange", ctx, contractAddress, startTime, endTime)
	ret0, _ := ret[0].([]entities.Transmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTimeRange indicates an expected call of FindByTimeRange.
func (mr *MockTransmissionRepositoryMockRecorder) FindByTimeRange(ctx, contractAddress, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTimeRange", reflect.TypeOf((*MockTransmissionRepository)(nil).FindByTimeRange), ctx, contractAddress, startTime, endTime)
}

// FindByTransmitter mocks base method.
func (m *MockTransmissionRepository) FindByTransmitter(ctx context.Context, transmitterAddress common.Address, limit int) ([]entities.Transmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTransmitter", ctx, transmitterAddress, limit)
	ret0, _ := ret[0].([]entities.Transmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTransmitter indicates an expected call of FindByTransmitter.
func (mr *MockTransmissionRepositoryMockRecorder) FindByTransmitter(ctx, transmitterAddress, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTransmitter", reflect.TypeOf((*MockTransmissionRepository)(nil).FindByTransmitter), ctx, transmitterAddress, limit)
}

// GetLatestRound mocks base method.
func (m *MockTransmissionRepository) GetLatestRound(ctx context.Context, contractAddress common.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRound", ctx, contractAddress)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRound indicates an expected call of GetLatestRound.
func (mr *MockTransmissionRepositoryMockRecorder) GetLatestRound(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRound", reflect.TypeOf((*MockTransmissionRepository)(nil).GetLatestRound), ctx, contractAddress)
}

// Save mocks base method.
func (m *MockTransmissionRepository) Save(ctx context.Context, transmission entities.Transmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, transmission)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTransmissionRepositoryMockRecorder) Save(ctx, transmission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransmissionRepository)(nil).Save), ctx, transmission)
}

// SaveBatch mocks base method.
func (m *MockTransmissionRepository) SaveBatch(ctx context.Context, transmissions []entities.Transmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, transmissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockTransmissionRepositoryMockRecorder) SaveBatch(ctx, transmissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockTransmissionRepository)(nil).SaveBatch), ctx, transmissions)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockUnitOfWork) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUnitOfWorkMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUnitOfWork)(nil).Commit))
}

// Jobs mocks base method.
func (m *MockUnitOfWork) Jobs() interfaces.JobRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].(interfaces.JobRepository)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockUnitOfWorkMockRecorder) Jobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockUnitOfWork)(nil).Jobs))
}

// Rollback mocks base method.
func (m *MockUnitOfWork) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUnitOfWorkMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUnitOfWork)(nil).Rollback))
}

// Transmissions mocks base method.
func (m *MockUnitOfWork) Transmissions() interfaces.TransmissionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transmissions")
	ret0, _ := ret[0].(interfaces.TransmissionRepository)
	return ret0
}

// Transmissions indicates an expected call of Transmissions.
func (mr *MockUnitOfWorkMockRecorder) Transmissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transmissions", reflect.TypeOf((*MockUnitOfWork)(nil).Transmissions))
}
