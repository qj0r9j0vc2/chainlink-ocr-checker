// Code generated by MockGen. DO NOT EDIT.
// Source: domain/interfaces/blockchain.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "chainlink-ocr-checker/domain/entities"
	interfaces "chainlink-ocr-checker/domain/interfaces"
	context "context"
	big "math/big"
	reflect "reflect"
	time "time"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockchainClient is a mock of BlockchainClient interface.
type MockBlockchainClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainClientMockRecorder
}

// MockBlockchainClientMockRecorder is the mock recorder for MockBlockchainClient.
type MockBlockchainClientMockRecorder struct {
	mock *MockBlockchainClient
}

// NewMockBlockchainClient creates a new mock instance.
func NewMockBlockchainClient(ctrl *gomock.Controller) *MockBlockchainClient {
	mock := &MockBlockchainClient{ctrl: ctrl}
	mock.recorder = &MockBlockchainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainClient) EXPECT() *MockBlockchainClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBlockchainClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBlockchainClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockchainClient)(nil).Close))
}

// GetBlockByNumber mocks base method.
func (m *MockBlockchainClient) GetBlockByNumber(ctx context.Context, number *big.Int) (*interfaces.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, number)
	ret0, _ := ret[0].(*interfaces.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockBlockchainClientMockRecorder) GetBlockByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockchainClient)(nil).GetBlockByNumber), ctx, number)
}

// GetBlockByTimestamp mocks base method.
func (m *MockBlockchainClient) GetBlockByTimestamp(ctx context.Context, timestamp time.Time) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByTimestamp", ctx, timestamp)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByTimestamp indicates an expected call of GetBlockByTimestamp.
func (mr *MockBlockchainClientMockRecorder) GetBlockByTimestamp(ctx, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByTimestamp", reflect.TypeOf((*MockBlockchainClient)(nil).GetBlockByTimestamp), ctx, timestamp)
}

// GetBlockNumber mocks base method.
func (m *MockBlockchainClient) GetBlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockNumber indicates an expected call of GetBlockNumber.
func (mr *MockBlockchainClientMockRecorder) GetBlockNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumber", reflect.TypeOf((*MockBlockchainClient)(nil).GetBlockNumber), ctx)
}

// MockOCR2AggregatorService is a mock of OCR2AggregatorService interface.
type MockOCR2AggregatorService struct {
	ctrl     *gomock.Controller
	recorder *MockOCR2AggregatorServiceMockRecorder
}

// MockOCR2AggregatorServiceMockRecorder is the mock recorder for MockOCR2AggregatorService.
type MockOCR2AggregatorServiceMockRecorder struct {
	mock *MockOCR2AggregatorService
}

// NewMockOCR2AggregatorService creates a new mock instance.
func NewMockOCR2AggregatorService(ctrl *gomock.Controller) *MockOCR2AggregatorService {
	mock := &MockOCR2AggregatorService{ctrl: ctrl}
	mock.recorder = &MockOCR2AggregatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCR2AggregatorService) EXPECT() *MockOCR2AggregatorServiceMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockOCR2AggregatorService) GetConfig(ctx context.Context, contractAddress common.Address) (*entities.OCR2Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, contractAddress)
	ret0, _ := ret[0].(*entities.OCR2Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockOCR2AggregatorServiceMockRecorder) GetConfig(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockOCR2AggregatorService)(nil).GetConfig), ctx, contractAddress)
}

// GetConfigFromBlock mocks base method.
func (m *MockOCR2AggregatorService) GetConfigFromBlock(ctx context.Context, contractAddress common.Address, blockNumber uint64) (*entities.OCR2Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigFromBlock", ctx, contractAddress, blockNumber)
	ret0, _ := ret[0].(*entities.OCR2Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigFromBlock indicates an expected call of GetConfigFromBlock.
func (mr *MockOCR2AggregatorServiceMockRecorder) GetConfigFromBlock(ctx, contractAddress, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigFromBlock", reflect.TypeOf((*MockOCR2AggregatorService)(nil).GetConfigFromBlock), ctx, contractAddress, blockNumber)
}

// GetLatestRound mocks base method.
func (m *MockOCR2AggregatorService) GetLatestRound(ctx context.Context, contractAddress common.Address) (*entities.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRound", ctx, contractAddress)
	ret0, _ := ret[0].(*entities.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRound indicates an expected call of GetLatestRound.
func (mr *MockOCR2AggregatorServiceMockRecorder) GetLatestRound(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRound", reflect.TypeOf((*MockOCR2AggregatorService)(nil).GetLatestRound), ctx, contractAddress)
}

// GetRoundData mocks base method.
func (m *MockOCR2AggregatorService) GetRoundData(ctx context.Context, contractAddress common.Address, roundID uint32) (*entities.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundData", ctx, contractAddress, roundID)
	ret0, _ := ret[0].(*entities.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoundData indicates an expected call of GetRoundData.
func (mr *MockOCR2AggregatorServiceMockRecorder) GetRoundData(ctx, contractAddress, roundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundData", reflect.TypeOf((*MockOCR2AggregatorService)(nil).GetRoundData), ctx, contractAddress, roundID)
}

// GetTransmissions mocks base method.
func (m *MockOCR2AggregatorService) GetTransmissions(ctx context.Context, contractAddress common.Address, startBlock, endBlock uint64) ([]entities.Transmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransmissions", ctx, contractAddress, startBlock, endBlock)
	ret0, _ := ret[0].([]entities.Transmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransmissions indicates an expected call of GetTransmissions.
func (mr *MockOCR2AggregatorServiceMockRecorder) GetTransmissions(ctx, contractAddress, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransmissions", reflect.TypeOf((*MockOCR2AggregatorService)(nil).GetTransmissions), ctx, contractAddress, startBlock, endBlock)
}

// MockTransmissionFetcher is a mock of TransmissionFetcher interface.
type MockTransmissionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockTransmissionFetcherMockRecorder
}

// MockTransmissionFetcherMockRecorder is the mock recorder for MockTransmissionFetcher.
type MockTransmissionFetcherMockRecorder struct {
	mock *MockTransmissionFetcher
}

// NewMockTransmissionFetcher creates a new mock instance.
func NewMockTransmissionFetcher(ctrl *gomock.Controller) *MockTransmissionFetcher {
	mock := &MockTransmissionFetcher{ctrl: ctrl}
	mock.recorder = &MockTransmissionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransmissionFetcher) EXPECT() *MockTransmissionFetcherMockRecorder {
	return m.recorder
}

// FetchByBlocks mocks base method.
func (m *MockTransmissionFetcher) FetchByBlocks(ctx context.Context, contractAddress common.Address, startBlock, endBlock uint64) (*entities.TransmissionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByBlocks", ctx, contractAddress, startBlock, endBlock)
	ret0, _ := ret[0].(*entities.TransmissionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByBlocks indicates an expected call of FetchByBlocks.
func (mr *MockTransmissionFetcherMockRecorder) FetchByBlocks(ctx, contractAddress, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByBlocks", reflect.TypeOf((*MockTransmissionFetcher)(nil).FetchByBlocks), ctx, contractAddress, startBlock, endBlock)
}

// FetchByRounds mocks base method.
func (m *MockTransmissionFetcher) FetchByRounds(ctx context.Context, contractAddress common.Address, startRound, endRound uint32) (*entities.TransmissionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByRounds", ctx, contractAddress, startRound, endRound)
	ret0, _ := ret[0].(*entities.TransmissionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByRounds indicates an expected call of FetchByRounds.
func (mr *MockTransmissionFetcherMockRecorder) FetchByRounds(ctx, contractAddress, startRound, endRound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByRounds", reflect.TypeOf((*MockTransmissionFetcher)(nil).FetchByRounds), ctx, contractAddress, startRound, endRound)
}

// FetchByTimeRange mocks base method.
func (m *MockTransmissionFetcher) FetchByTimeRange(ctx context.Context, contractAddress common.Address, startTime, endTime time.Time) (*entities.TransmissionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByTimeRange", ctx, contractAddress, startTime, endTime)
	ret0, _ := ret[0].(*entities.TransmissionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByTimeRange indicates an expected call of FetchByTimeRange.
func (mr *MockTransmissionFetcherMockRecorder) FetchByTimeRange(ctx, contractAddress, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByTimeRange", reflect.TypeOf((*MockTransmissionFetcher)(nil).FetchByTimeRange), ctx, contractAddress, startTime, endTime)
}

// MockTransmissionWatcher is a mock of TransmissionWatcher interface.
type MockTransmissionWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTransmissionWatcherMockRecorder
}

// MockTransmissionWatcherMockRecorder is the mock recorder for MockTransmissionWatcher.
type MockTransmissionWatcherMockRecorder struct {
	mock *MockTransmissionWatcher
}

// NewMockTransmissionWatcher creates a new mock instance.
func NewMockTransmissionWatcher(ctrl *gomock.Controller) *MockTransmissionWatcher {
	mock := &MockTransmissionWatcher{ctrl: ctrl}
	mock.recorder = &MockTransmissionWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransmissionWatcher) EXPECT() *MockTransmissionWatcherMockRecorder {
	return m.recorder
}

// GetLatestTransmissions mocks base method.
func (m *MockTransmissionWatcher) GetLatestTransmissions(ctx context.Context, transmitterAddress common.Address, limit int) ([]entities.TransmitterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTransmissions", ctx, transmitterAddress, limit)
	ret0, _ := ret[0].([]entities.TransmitterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTransmissions indicates an expected call of GetLatestTransmissions.
func (mr *MockTransmissionWatcherMockRecorder) GetLatestTransmissions(ctx, transmitterAddress, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTransmissions", reflect.TypeOf((*MockTransmissionWatcher)(nil).GetLatestTransmissions), ctx, transmitterAddress, limit)
}

// WatchTransmissions mocks base method.
func (m *MockTransmissionWatcher) WatchTransmissions(ctx context.Context, contracts []common.Address, callback interfaces.TransmissionCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTransmissions", ctx, contracts, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchTransmissions indicates an expected call of WatchTransmissions.
func (mr *MockTransmissionWatcherMockRecorder) WatchTransmissions(ctx, contracts, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransmissions", reflect.TypeOf((*MockTransmissionWatcher)(nil).WatchTransmissions), ctx, contracts, callback)
}
