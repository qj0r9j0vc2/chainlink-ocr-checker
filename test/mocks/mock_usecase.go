// Code generated by MockGen. DO NOT EDIT.
// Source: domain/interfaces/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "chainlink-ocr-checker/domain/entities"
	interfaces "chainlink-ocr-checker/domain/interfaces"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFetchTransmissionsUseCase is a mock of FetchTransmissionsUseCase interface.
type MockFetchTransmissionsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFetchTransmissionsUseCaseMockRecorder
}

// MockFetchTransmissionsUseCaseMockRecorder is the mock recorder for MockFetchTransmissionsUseCase.
type MockFetchTransmissionsUseCaseMockRecorder struct {
	mock *MockFetchTransmissionsUseCase
}

// NewMockFetchTransmissionsUseCase creates a new mock instance.
func NewMockFetchTransmissionsUseCase(ctrl *gomock.Controller) *MockFetchTransmissionsUseCase {
	mock := &MockFetchTransmissionsUseCase{ctrl: ctrl}
	mock.recorder = &MockFetchTransmissionsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchTransmissionsUseCase) EXPECT() *MockFetchTransmissionsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFetchTransmissionsUseCase) Execute(ctx context.Context, params interfaces.FetchTransmissionsParams) (*entities.TransmissionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, params)
	ret0, _ := ret[0].(*entities.TransmissionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFetchTransmissionsUseCaseMockRecorder) Execute(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFetchTransmissionsUseCase)(nil).Execute), ctx, params)
}

// MockWatchTransmittersUseCase is a mock of WatchTransmittersUseCase interface.
type MockWatchTransmittersUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWatchTransmittersUseCaseMockRecorder
}

// MockWatchTransmittersUseCaseMockRecorder is the mock recorder for MockWatchTransmittersUseCase.
type MockWatchTransmittersUseCaseMockRecorder struct {
	mock *MockWatchTransmittersUseCase
}

// NewMockWatchTransmittersUseCase creates a new mock instance.
func NewMockWatchTransmittersUseCase(ctrl *gomock.Controller) *MockWatchTransmittersUseCase {
	mock := &MockWatchTransmittersUseCase{ctrl: ctrl}
	mock.recorder = &MockWatchTransmittersUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchTransmittersUseCase) EXPECT() *MockWatchTransmittersUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockWatchTransmittersUseCase) Execute(ctx context.Context, params interfaces.WatchTransmittersParams) (*interfaces.WatchTransmittersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, params)
	ret0, _ := ret[0].(*interfaces.WatchTransmittersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockWatchTransmittersUseCaseMockRecorder) Execute(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWatchTransmittersUseCase)(nil).Execute), ctx, params)
}

// MockParseTransmissionsUseCase is a mock of ParseTransmissionsUseCase interface.
type MockParseTransmissionsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockParseTransmissionsUseCaseMockRecorder
}

// MockParseTransmissionsUseCaseMockRecorder is the mock recorder for MockParseTransmissionsUseCase.
type MockParseTransmissionsUseCaseMockRecorder struct {
	mock *MockParseTransmissionsUseCase
}

// NewMockParseTransmissionsUseCase creates a new mock instance.
func NewMockParseTransmissionsUseCase(ctrl *gomock.Controller) *MockParseTransmissionsUseCase {
	mock := &MockParseTransmissionsUseCase{ctrl: ctrl}
	mock.recorder = &MockParseTransmissionsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParseTransmissionsUseCase) EXPECT() *MockParseTransmissionsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockParseTransmissionsUseCase) Execute(ctx context.Context, params interfaces.ParseTransmissionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockParseTransmissionsUseCaseMockRecorder) Execute(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockParseTransmissionsUseCase)(nil).Execute), ctx, params)
}

// MockTransmissionAnalyzer is a mock of TransmissionAnalyzer interface.
type MockTransmissionAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockTransmissionAnalyzerMockRecorder
}

// MockTransmissionAnalyzerMockRecorder is the mock recorder for MockTransmissionAnalyzer.
type MockTransmissionAnalyzerMockRecorder struct {
	mock *MockTransmissionAnalyzer
}

// NewMockTransmissionAnalyzer creates a new mock instance.
func NewMockTransmissionAnalyzer(ctrl *gomock.Controller) *MockTransmissionAnalyzer {
	mock := &MockTransmissionAnalyzer{ctrl: ctrl}
	mock.recorder = &MockTransmissionAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransmissionAnalyzer) EXPECT() *MockTransmissionAnalyzerMockRecorder {
	return m.recorder
}

// AnalyzeObserverActivity mocks base method.
func (m *MockTransmissionAnalyzer) AnalyzeObserverActivity(transmissions []entities.Transmission) ([]entities.ObserverActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeObserverActivity", transmissions)
	ret0, _ := ret[0].([]entities.ObserverActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeObserverActivity indicates an expected call of AnalyzeObserverActivity.
func (mr *MockTransmissionAnalyzerMockRecorder) AnalyzeObserverActivity(transmissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeObserverActivity", reflect.TypeOf((*MockTransmissionAnalyzer)(nil).AnalyzeObserverActivity), transmissions)
}

// DetectAnomalies mocks base method.
func (m *MockTransmissionAnalyzer) DetectAnomalies(transmissions []entities.Transmission) ([]interfaces.TransmissionAnomaly, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectAnomalies", transmissions)
	ret0, _ := ret[0].([]interfaces.TransmissionAnomaly)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectAnomalies indicates an expected call of DetectAnomalies.
func (mr *MockTransmissionAnalyzerMockRecorder) DetectAnomalies(transmissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectAnomalies", reflect.TypeOf((*MockTransmissionAnalyzer)(nil).DetectAnomalies), transmissions)
}

// GenerateReport mocks base method.
func (m *MockTransmissionAnalyzer) GenerateReport(transmissions []entities.Transmission, format interfaces.OutputFormat) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReport", transmissions, format)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReport indicates an expected call of GenerateReport.
func (mr *MockTransmissionAnalyzerMockRecorder) GenerateReport(transmissions, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReport", reflect.TypeOf((*MockTransmissionAnalyzer)(nil).GenerateReport), transmissions, format)
}
